#ifndef _CACHEUTILS_H_
#define _CACHEUTILS_H_

#include <assert.h>
#include <unistd.h>
#include <sys/syscall.h>
#include <linux/perf_event.h>
#include <sys/ioctl.h>
#include <stdio.h>
#include <stdint.h>
#include <signal.h>
#include <setjmp.h>
#include <sched.h>
#define ARM_PERF            1
#define ARM_CLOCK_MONOTONIC 2
#define ARM_TIMER           3

/* ============================================================
 *                    User configuration
 * ============================================================ */
static size_t CACHE_MISS = 0;
static size_t pagesize = 0;
char *mem;

#define USE_RDTSC_BEGIN_END     0

#define USE_RDTSCP              1

#define ARM_CLOCK_SOURCE        ARM_CLOCK_MONOTONIC

/* ============================================================
 *                  User configuration End
 * ============================================================ */


// ---------------------------------------------------------------------------
static size_t perf_fd;
void perf_init();

#if defined(__x86_64__)
// ---------------------------------------------------------------------------
uint64_t rdtsc();

// ---------------------------------------------------------------------------
uint64_t rdtsc_begin();

// ---------------------------------------------------------------------------
uint64_t rdtsc_end();

// ---------------------------------------------------------------------------
void flush(void *p);

// ---------------------------------------------------------------------------
void maccess(void *p);

// ---------------------------------------------------------------------------
void mfence();

// ---------------------------------------------------------------------------
void nospec();

#include <cpuid.h>
// ---------------------------------------------------------------------------
unsigned int xbegin();

// ---------------------------------------------------------------------------
void xend();

// ---------------------------------------------------------------------------
int has_tsx();

// ---------------------------------------------------------------------------
void maccess_tsx(void* ptr);

#elif defined(__i386__)
// ---------------------------------------------------------------------------
uint32_t rdtsc();

// ---------------------------------------------------------------------------
void flush(void *p);

// ---------------------------------------------------------------------------
void maccess(void *p);

// ---------------------------------------------------------------------------
void mfence();

// ---------------------------------------------------------------------------
void nospec();

#include <cpuid.h>
// ---------------------------------------------------------------------------
int has_tsx();

#elif defined(__aarch64__)
#if ARM_CLOCK_SOURCE == ARM_CLOCK_MONOTONIC
#include <time.h>
#endif

// ---------------------------------------------------------------------------
uint64_t rdtsc();

// ---------------------------------------------------------------------------
uint64_t rdtsc_begin();

// ---------------------------------------------------------------------------
uint64_t rdtsc_end();

// ---------------------------------------------------------------------------
void flush(void *p);

// ---------------------------------------------------------------------------
void maccess(void *p);

// ---------------------------------------------------------------------------
void mfence();

// ---------------------------------------------------------------------------
void nospec();

#elif defined(__PPC64__)
#include <sys/platform/ppc.h>
uint64_t rdtsc();

// ---------------------------------------------------------------------------
uint64_t rdtsc_begin();

// ---------------------------------------------------------------------------
uint64_t rdtsc_end();

// ---------------------------------------------------------------------------
void flush(void *p);

// ---------------------------------------------------------------------------
void maccess(void *p);

// ---------------------------------------------------------------------------
void mfence();

// ---------------------------------------------------------------------------
void nospec();
#endif

// ---------------------------------------------------------------------------
int flush_reload(void *ptr);

// ---------------------------------------------------------------------------
int flush_reload_t(void *ptr);

// ---------------------------------------------------------------------------
int reload_t(void *ptr);

// ---------------------------------------------------------------------------
size_t detect_flush_reload_threshold();

// ---------------------------------------------------------------------------
void maccess_speculative(void* ptr);

// ---------------------------------------------------------------------------
jmp_buf trycatch_buf;

// ---------------------------------------------------------------------------
void unblock_signal(int signum __attribute__((__unused__)));

// ---------------------------------------------------------------------------
void trycatch_segfault_handler(int signum);

// ---------------------------------------------------------------------------
int try_start();

// ---------------------------------------------------------------------------
void try_end();

// ---------------------------------------------------------------------------
void try_abort();

// ---------------------------------------------------------------------------
void cache_encode(char data);

// ---------------------------------------------------------------------------
void cache_decode_pretty(char *leaked, int index);

// ---------------------------------------------------------------------------
void flush_shared_memory();
#endif
